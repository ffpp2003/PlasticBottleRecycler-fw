                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.4.0 #14620 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _hr4988_setStepper
                                     13 	.globl _hr4988_setStepMode
                                     14 	.globl _hr4988_setSpeed
                                     15 	.globl _hr4988_setSteps
                                     16 	.globl _hr4988_init
                                     17 	.globl __delay_ms
                                     18 	.globl _lcd_puts_auto
                                     19 	.globl _lcd_setpos
                                     20 	.globl _lcd_puts
                                     21 	.globl _lcd_send_byte
                                     22 	.globl _lcd_init
                                     23 	.globl _lcd_gpioinit
                                     24 	.globl _GPIO_WriteReverse
                                     25 	.globl _GPIO_Init
                                     26 	.globl _CLK_SYSCLKConfig
                                     27 	.globl _CLK_ClockSwitchConfig
                                     28 	.globl _CLK_DeInit
                                     29 	.globl _assert_failed
                                     30 ;--------------------------------------------------------
                                     31 ; ram data
                                     32 ;--------------------------------------------------------
                                     33 	.area DATA
                                     34 ;--------------------------------------------------------
                                     35 ; ram data
                                     36 ;--------------------------------------------------------
                                     37 	.area INITIALIZED
                                     38 ;--------------------------------------------------------
                                     39 ; Stack segment in internal ram
                                     40 ;--------------------------------------------------------
                                     41 	.area SSEG
      000000                         42 __start__stack:
      000000                         43 	.ds	1
                                     44 
                                     45 ;--------------------------------------------------------
                                     46 ; absolute external ram data
                                     47 ;--------------------------------------------------------
                                     48 	.area DABS (ABS)
                                     49 
                                     50 ; default segment ordering for linker
                                     51 	.area HOME
                                     52 	.area GSINIT
                                     53 	.area GSFINAL
                                     54 	.area CONST
                                     55 	.area INITIALIZER
                                     56 	.area CODE
                                     57 
                                     58 ;--------------------------------------------------------
                                     59 ; interrupt vector
                                     60 ;--------------------------------------------------------
                                     61 	.area HOME
      000000                         62 __interrupt_vect:
      000000 82v00u00u00             63 	int s_GSINIT ; reset
      000004 82v00u00u00             64 	int _TRAP_IRQHandler ; trap
      000008 82v00u00u00             65 	int _TLI_IRQHandler ; int0
      00000C 82v00u00u00             66 	int _AWU_IRQHandler ; int1
      000010 82v00u00u00             67 	int _CLK_IRQHandler ; int2
      000014 82v00u00u00             68 	int _EXTI_PORTA_IRQHandler ; int3
      000018 82v00u00u00             69 	int _EXTI_PORTB_IRQHandler ; int4
      00001C 82v00u00u00             70 	int _EXTI_PORTC_IRQHandler ; int5
      000020 82v00u00u00             71 	int _EXTI_PORTD_IRQHandler ; int6
      000024 82v00u00u00             72 	int _EXTI_PORTE_IRQHandler ; int7
      000028 82 00 00 00             73 	int 0x000000 ; int8
      00002C 82 00 00 00             74 	int 0x000000 ; int9
      000030 82v00u00u00             75 	int _SPI_IRQHandler ; int10
      000034 82v00u00u00             76 	int _TIM1_UPD_OVF_TRG_BRK_IRQHandler ; int11
      000038 82v00u00u00             77 	int _TIM1_CAP_COM_IRQHandler ; int12
      00003C 82v00u00u00             78 	int _TIM2_UPD_OVF_BRK_IRQHandler ; int13
      000040 82v00u00u00             79 	int _TIM2_CAP_COM_IRQHandler ; int14
      000044 82v00u00u00             80 	int _TIM3_UPD_OVF_BRK_IRQHandler ; int15
      000048 82v00u00u00             81 	int _TIM3_CAP_COM_IRQHandler ; int16
      00004C 82 00 00 00             82 	int 0x000000 ; int17
      000050 82 00 00 00             83 	int 0x000000 ; int18
      000054 82v00u00u00             84 	int _I2C_IRQHandler ; int19
      000058 82v00u00u00             85 	int _UART2_TX_IRQHandler ; int20
      00005C 82v00u00u00             86 	int _UART2_RX_IRQHandler ; int21
      000060 82v00u00u00             87 	int _ADC1_IRQHandler ; int22
      000064 82v00u00u00             88 	int _TIM4_UPD_OVF_IRQHandler ; int23
      000068 82v00u00u00             89 	int _EEPROM_EEC_IRQHandler ; int24
                                     90 ;--------------------------------------------------------
                                     91 ; global & static initialisations
                                     92 ;--------------------------------------------------------
                                     93 	.area HOME
                                     94 	.area GSINIT
                                     95 	.area GSFINAL
                                     96 	.area GSINIT
      000000 CDr00r00         [ 4]   97 	call	___sdcc_external_startup
      000003 4D               [ 1]   98 	tnz	a
      000004 27 03            [ 1]   99 	jreq	__sdcc_init_data
      000006 CCr00r6C         [ 2]  100 	jp	__sdcc_program_startup
      000009                        101 __sdcc_init_data:
                                    102 ; stm8_genXINIT() start
      000009 AEr00r00         [ 2]  103 	ldw x, #l_DATA
      00000C 27 07            [ 1]  104 	jreq	00002$
      00000E                        105 00001$:
      00000E 72 4FuFFuFF      [ 1]  106 	clr (s_DATA - 1, x)
      000012 5A               [ 2]  107 	decw x
      000013 26 F9            [ 1]  108 	jrne	00001$
      000015                        109 00002$:
      000015 AEr00r00         [ 2]  110 	ldw	x, #l_INITIALIZER
      000018 27 09            [ 1]  111 	jreq	00004$
      00001A                        112 00003$:
      00001A D6uFFuFF         [ 1]  113 	ld	a, (s_INITIALIZER - 1, x)
      00001D D7uFFuFF         [ 1]  114 	ld	(s_INITIALIZED - 1, x), a
      000020 5A               [ 2]  115 	decw	x
      000021 26 F7            [ 1]  116 	jrne	00003$
      000023                        117 00004$:
                                    118 ; stm8_genXINIT() end
                                    119 	.area GSFINAL
      000000 CCr00r6C         [ 2]  120 	jp	__sdcc_program_startup
                                    121 ;--------------------------------------------------------
                                    122 ; Home
                                    123 ;--------------------------------------------------------
                                    124 	.area HOME
                                    125 	.area HOME
      00006C                        126 __sdcc_program_startup:
      00006C CCr00r00         [ 2]  127 	jp	_main
                                    128 ;	return from main will return to caller
                                    129 ;--------------------------------------------------------
                                    130 ; code
                                    131 ;--------------------------------------------------------
                                    132 	.area CODE
                                    133 ;	../main.c: 44: void main(void) { // NOLINT 
                                    134 ;	-----------------------------------------
                                    135 ;	 function main
                                    136 ;	-----------------------------------------
      000000                        137 _main:
                                    138 ;	../main.c: 45: CLK_DeInit();
      000000 CDr00r00         [ 4]  139 	call	_CLK_DeInit
                                    140 ;	../main.c: 47: CLK_SYSCLKConfig(CLK_PRESCALER_CPUDIV1);
      000003 A6 80            [ 1]  141 	ld	a, #0x80
      000005 CDr00r00         [ 4]  142 	call	_CLK_SYSCLKConfig
                                    143 ;	../main.c: 49: CLK_SYSCLKConfig(CLK_PRESCALER_HSIDIV1);
      000008 4F               [ 1]  144 	clr	a
      000009 CDr00r00         [ 4]  145 	call	_CLK_SYSCLKConfig
                                    146 ;	../main.c: 51: CLK_ClockSwitchConfig(CLK_SWITCHMODE_AUTO, CLK_SOURCE_HSI, DISABLE, CLK_CURRENTCLOCKSTATE_DISABLE);
      00000C 4B 00            [ 1]  147 	push	#0x00
      00000E 4B 00            [ 1]  148 	push	#0x00
      000010 4B E1            [ 1]  149 	push	#0xe1
      000012 A6 01            [ 1]  150 	ld	a, #0x01
      000014 CDr00r00         [ 4]  151 	call	_CLK_ClockSwitchConfig
                                    152 ;	../main.c: 53: GPIO_Init(GPIOE, GPIO_PIN_5, GPIO_MODE_OUT_PP_LOW_SLOW);
      000017 4B C0            [ 1]  153 	push	#0xc0
      000019 A6 20            [ 1]  154 	ld	a, #0x20
      00001B AE 50 14         [ 2]  155 	ldw	x, #0x5014
      00001E CDr00r00         [ 4]  156 	call	_GPIO_Init
                                    157 ;	../main.c: 54: hr4988_init();
      000021 CDr00r00         [ 4]  158 	call	_hr4988_init
                                    159 ;	../main.c: 55: hr4988_setSteps(40);
      000024 AE 00 28         [ 2]  160 	ldw	x, #0x0028
      000027 CDr00r00         [ 4]  161 	call	_hr4988_setSteps
                                    162 ;	../main.c: 56: hr4988_setSpeed(100);
      00002A AE 00 64         [ 2]  163 	ldw	x, #0x0064
      00002D CDr00r00         [ 4]  164 	call	_hr4988_setSpeed
                                    165 ;	../main.c: 57: hr4988_setStepper(ENABLE);
      000030 A6 01            [ 1]  166 	ld	a, #0x01
      000032 CDr00r00         [ 4]  167 	call	_hr4988_setStepper
                                    168 ;	../main.c: 59: _delay_ms(100);
      000035 AE 00 64         [ 2]  169 	ldw	x, #0x0064
      000038 CDr00r00         [ 4]  170 	call	__delay_ms
                                    171 ;	../main.c: 60: lcd_gpioinit();
      00003B CDr00r00         [ 4]  172 	call	_lcd_gpioinit
                                    173 ;	../main.c: 61: lcd_init();
      00003E CDr00r00         [ 4]  174 	call	_lcd_init
                                    175 ;	../main.c: 62: lcd_send_byte(LCD_CTL | LCD_ON | LCD_CUR_ON | LCD_CUR_BLNK, LCD_CMD);
      000041 4B 00            [ 1]  176 	push	#0x00
      000043 A6 0F            [ 1]  177 	ld	a, #0x0f
      000045 CDr00r00         [ 4]  178 	call	_lcd_send_byte
                                    179 ;	../main.c: 65: lcd_puts_auto("Hello from STM8!");
      000048 AEr00r00         [ 2]  180 	ldw	x, #(___str_0+0)
      00004B CDr00r00         [ 4]  181 	call	_lcd_puts_auto
                                    182 ;	../main.c: 66: lcd_send_byte(LCD_CTL | LCD_ON | LCD_CUR_OFF, LCD_CMD);
      00004E 4B 00            [ 1]  183 	push	#0x00
      000050 A6 0C            [ 1]  184 	ld	a, #0x0c
      000052 CDr00r00         [ 4]  185 	call	_lcd_send_byte
                                    186 ;	../main.c: 68: _delay_ms(1000);
      000055 AE 03 E8         [ 2]  187 	ldw	x, #0x03e8
      000058 CDr00r00         [ 4]  188 	call	__delay_ms
                                    189 ;	../main.c: 69: lcd_send_byte(LCD_CLR, LCD_CMD);
      00005B 4B 00            [ 1]  190 	push	#0x00
      00005D A6 01            [ 1]  191 	ld	a, #0x01
      00005F CDr00r00         [ 4]  192 	call	_lcd_send_byte
                                    193 ;	../main.c: 70: lcd_setpos(0,0);
      000062 4B 00            [ 1]  194 	push	#0x00
      000064 4F               [ 1]  195 	clr	a
      000065 CDr00r00         [ 4]  196 	call	_lcd_setpos
                                    197 ;	../main.c: 71: lcd_puts("MODE:");
      000068 AEr00r11         [ 2]  198 	ldw	x, #(___str_1+0)
      00006B CDr00r00         [ 4]  199 	call	_lcd_puts
                                    200 ;	../main.c: 72: while (1) {
      00006E                        201 00102$:
                                    202 ;	../main.c: 73: lcd_setpos(1,0);
      00006E 4B 00            [ 1]  203 	push	#0x00
      000070 A6 01            [ 1]  204 	ld	a, #0x01
      000072 CDr00r00         [ 4]  205 	call	_lcd_setpos
                                    206 ;	../main.c: 74: lcd_puts("1/16 ");
      000075 AEr00r17         [ 2]  207 	ldw	x, #(___str_2+0)
      000078 CDr00r00         [ 4]  208 	call	_lcd_puts
                                    209 ;	../main.c: 75: hr4988_setStepMode(STEP_1_16);
      00007B A6 04            [ 1]  210 	ld	a, #0x04
      00007D CDr00r00         [ 4]  211 	call	_hr4988_setStepMode
                                    212 ;	../main.c: 76: _delay_ms(5000);
      000080 AE 13 88         [ 2]  213 	ldw	x, #0x1388
      000083 CDr00r00         [ 4]  214 	call	__delay_ms
                                    215 ;	../main.c: 77: lcd_setpos(1,0);
      000086 4B 00            [ 1]  216 	push	#0x00
      000088 A6 01            [ 1]  217 	ld	a, #0x01
      00008A CDr00r00         [ 4]  218 	call	_lcd_setpos
                                    219 ;	../main.c: 78: lcd_puts("1/32 ");
      00008D AEr00r1D         [ 2]  220 	ldw	x, #(___str_3+0)
      000090 CDr00r00         [ 4]  221 	call	_lcd_puts
                                    222 ;	../main.c: 79: hr4988_setStepMode(STEP_1_32);
      000093 A6 05            [ 1]  223 	ld	a, #0x05
      000095 CDr00r00         [ 4]  224 	call	_hr4988_setStepMode
                                    225 ;	../main.c: 80: _delay_ms(5000);
      000098 AE 13 88         [ 2]  226 	ldw	x, #0x1388
      00009B CDr00r00         [ 4]  227 	call	__delay_ms
                                    228 ;	../main.c: 81: lcd_setpos(1,0);
      00009E 4B 00            [ 1]  229 	push	#0x00
      0000A0 A6 01            [ 1]  230 	ld	a, #0x01
      0000A2 CDr00r00         [ 4]  231 	call	_lcd_setpos
                                    232 ;	../main.c: 82: lcd_puts("1/64 ");
      0000A5 AEr00r23         [ 2]  233 	ldw	x, #(___str_4+0)
      0000A8 CDr00r00         [ 4]  234 	call	_lcd_puts
                                    235 ;	../main.c: 83: hr4988_setStepMode(STEP_1_64);
      0000AB A6 06            [ 1]  236 	ld	a, #0x06
      0000AD CDr00r00         [ 4]  237 	call	_hr4988_setStepMode
                                    238 ;	../main.c: 84: _delay_ms(5000);
      0000B0 AE 13 88         [ 2]  239 	ldw	x, #0x1388
      0000B3 CDr00r00         [ 4]  240 	call	__delay_ms
                                    241 ;	../main.c: 85: lcd_setpos(1,0);
      0000B6 4B 00            [ 1]  242 	push	#0x00
      0000B8 A6 01            [ 1]  243 	ld	a, #0x01
      0000BA CDr00r00         [ 4]  244 	call	_lcd_setpos
                                    245 ;	../main.c: 86: lcd_puts("1/128");
      0000BD AEr00r29         [ 2]  246 	ldw	x, #(___str_5+0)
      0000C0 CDr00r00         [ 4]  247 	call	_lcd_puts
                                    248 ;	../main.c: 87: hr4988_setStepMode(STEP_1_128);
      0000C3 A6 07            [ 1]  249 	ld	a, #0x07
      0000C5 CDr00r00         [ 4]  250 	call	_hr4988_setStepMode
                                    251 ;	../main.c: 88: _delay_ms(5000);
      0000C8 AE 13 88         [ 2]  252 	ldw	x, #0x1388
      0000CB CDr00r00         [ 4]  253 	call	__delay_ms
                                    254 ;	../main.c: 89: lcd_setpos(1,0);
      0000CE 4B 00            [ 1]  255 	push	#0x00
      0000D0 A6 01            [ 1]  256 	ld	a, #0x01
      0000D2 CDr00r00         [ 4]  257 	call	_lcd_setpos
                                    258 ;	../main.c: 90: lcd_puts("1/1");
      0000D5 AEr00r2F         [ 2]  259 	ldw	x, #(___str_6+0)
      0000D8 CDr00r00         [ 4]  260 	call	_lcd_puts
                                    261 ;	../main.c: 91: hr4988_setStepMode(STEP_1_1);
      0000DB 4F               [ 1]  262 	clr	a
      0000DC CDr00r00         [ 4]  263 	call	_hr4988_setStepMode
                                    264 ;	../main.c: 92: _delay_ms(5000);
      0000DF AE 13 88         [ 2]  265 	ldw	x, #0x1388
      0000E2 CDr00r00         [ 4]  266 	call	__delay_ms
      0000E5 20 87            [ 2]  267 	jra	00102$
                                    268 ;	../main.c: 94: }
      0000E7 81               [ 4]  269 	ret
                                    270 ;	../main.c: 106: void assert_failed(u8* file, u32 line) { 
                                    271 ;	-----------------------------------------
                                    272 ;	 function assert_failed
                                    273 ;	-----------------------------------------
      0000E8                        274 _assert_failed:
                                    275 ;	../main.c: 111: while (1) {
      0000E8                        276 00102$:
                                    277 ;	../main.c: 112: GPIO_WriteReverse(GPIOE, GPIO_PIN_5);
      0000E8 A6 20            [ 1]  278 	ld	a, #0x20
      0000EA AE 50 14         [ 2]  279 	ldw	x, #0x5014
      0000ED CDr00r00         [ 4]  280 	call	_GPIO_WriteReverse
                                    281 ;	../main.c: 113: _delay_ms(500);
      0000F0 AE 01 F4         [ 2]  282 	ldw	x, #0x01f4
      0000F3 CDr00r00         [ 4]  283 	call	__delay_ms
      0000F6 20 F0            [ 2]  284 	jra	00102$
                                    285 ;	../main.c: 115: }
      0000F8 1E 01            [ 2]  286 	ldw	x, (1, sp)
      0000FA 5B 06            [ 2]  287 	addw	sp, #6
      0000FC FC               [ 2]  288 	jp	(x)
                                    289 	.area CODE
                                    290 	.area CONST
                                    291 	.area CONST
      000000                        292 ___str_0:
      000000 48 65 6C 6C 6F 20 66   293 	.ascii "Hello from STM8!"
             72 6F 6D 20 53 54 4D
             38 21
      000010 00                     294 	.db 0x00
                                    295 	.area CODE
                                    296 	.area CONST
      000011                        297 ___str_1:
      000011 4D 4F 44 45 3A         298 	.ascii "MODE:"
      000016 00                     299 	.db 0x00
                                    300 	.area CODE
                                    301 	.area CONST
      000017                        302 ___str_2:
      000017 31 2F 31 36 20         303 	.ascii "1/16 "
      00001C 00                     304 	.db 0x00
                                    305 	.area CODE
                                    306 	.area CONST
      00001D                        307 ___str_3:
      00001D 31 2F 33 32 20         308 	.ascii "1/32 "
      000022 00                     309 	.db 0x00
                                    310 	.area CODE
                                    311 	.area CONST
      000023                        312 ___str_4:
      000023 31 2F 36 34 20         313 	.ascii "1/64 "
      000028 00                     314 	.db 0x00
                                    315 	.area CODE
                                    316 	.area CONST
      000029                        317 ___str_5:
      000029 31 2F 31 32 38         318 	.ascii "1/128"
      00002E 00                     319 	.db 0x00
                                    320 	.area CODE
                                    321 	.area CONST
      00002F                        322 ___str_6:
      00002F 31 2F 31               323 	.ascii "1/1"
      000032 00                     324 	.db 0x00
                                    325 	.area CODE
                                    326 	.area INITIALIZER
                                    327 	.area CABS (ABS)
