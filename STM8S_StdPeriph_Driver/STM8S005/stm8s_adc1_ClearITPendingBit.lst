                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.4.0 #14620 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module stm8s_adc1_ClearITPendingBit
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _assert_failed
                                     12 	.globl _ADC1_ClearITPendingBit
                                     13 ;--------------------------------------------------------
                                     14 ; ram data
                                     15 ;--------------------------------------------------------
                                     16 	.area DATA
                                     17 ;--------------------------------------------------------
                                     18 ; ram data
                                     19 ;--------------------------------------------------------
                                     20 	.area INITIALIZED
                                     21 ;--------------------------------------------------------
                                     22 ; absolute external ram data
                                     23 ;--------------------------------------------------------
                                     24 	.area DABS (ABS)
                                     25 
                                     26 ; default segment ordering for linker
                                     27 	.area HOME
                                     28 	.area GSINIT
                                     29 	.area GSFINAL
                                     30 	.area CONST
                                     31 	.area INITIALIZER
                                     32 	.area CODE
                                     33 
                                     34 ;--------------------------------------------------------
                                     35 ; global & static initialisations
                                     36 ;--------------------------------------------------------
                                     37 	.area HOME
                                     38 	.area GSINIT
                                     39 	.area GSFINAL
                                     40 	.area GSINIT
                                     41 ;--------------------------------------------------------
                                     42 ; Home
                                     43 ;--------------------------------------------------------
                                     44 	.area HOME
                                     45 	.area HOME
                                     46 ;--------------------------------------------------------
                                     47 ; code
                                     48 ;--------------------------------------------------------
                                     49 	.area CODE
                                     50 ;	../STM8S_StdPeriph_Driver/src/stm8s_adc1_ClearITPendingBit.c: 59: void ADC1_ClearITPendingBit(ADC1_IT_TypeDef ITPendingBit)
                                     51 ;	-----------------------------------------
                                     52 ;	 function ADC1_ClearITPendingBit
                                     53 ;	-----------------------------------------
      000000                         54 _ADC1_ClearITPendingBit:
      000000 52 03            [ 2]   55 	sub	sp, #3
                                     56 ;	../STM8S_StdPeriph_Driver/src/stm8s_adc1_ClearITPendingBit.c: 64: assert_param(IS_ADC1_ITPENDINGBIT_OK(ITPendingBit));
      000002 1F 02            [ 2]   57 	ldw	(0x02, sp), x
      000004 A3 00 80         [ 2]   58 	cpw	x, #0x0080
      000007 27 4C            [ 1]   59 	jreq	00110$
      000009 A3 01 40         [ 2]   60 	cpw	x, #0x0140
      00000C 27 47            [ 1]   61 	jreq	00110$
      00000E A3 01 10         [ 2]   62 	cpw	x, #0x0110
      000011 27 42            [ 1]   63 	jreq	00110$
      000013 A3 01 11         [ 2]   64 	cpw	x, #0x0111
      000016 27 3D            [ 1]   65 	jreq	00110$
      000018 A3 01 12         [ 2]   66 	cpw	x, #0x0112
      00001B 27 38            [ 1]   67 	jreq	00110$
      00001D A3 01 13         [ 2]   68 	cpw	x, #0x0113
      000020 27 33            [ 1]   69 	jreq	00110$
      000022 A3 01 14         [ 2]   70 	cpw	x, #0x0114
      000025 27 2E            [ 1]   71 	jreq	00110$
      000027 A3 01 15         [ 2]   72 	cpw	x, #0x0115
      00002A 27 29            [ 1]   73 	jreq	00110$
      00002C A3 01 16         [ 2]   74 	cpw	x, #0x0116
      00002F 27 24            [ 1]   75 	jreq	00110$
      000031 A3 01 17         [ 2]   76 	cpw	x, #0x0117
      000034 27 1F            [ 1]   77 	jreq	00110$
      000036 A3 01 18         [ 2]   78 	cpw	x, #0x0118
      000039 27 1A            [ 1]   79 	jreq	00110$
      00003B A3 01 1C         [ 2]   80 	cpw	x, #0x011c
      00003E 27 15            [ 1]   81 	jreq	00110$
      000040 A3 01 19         [ 2]   82 	cpw	x, #0x0119
      000043 27 10            [ 1]   83 	jreq	00110$
      000045 89               [ 2]   84 	pushw	x
      000046 4B 40            [ 1]   85 	push	#0x40
      000048 4B 00            [ 1]   86 	push	#0x00
      00004A 4B 00            [ 1]   87 	push	#0x00
      00004C 4B 00            [ 1]   88 	push	#0x00
      00004E AEr00r00         [ 2]   89 	ldw	x, #(___str_0+0)
      000051 CDr00r00         [ 4]   90 	call	_assert_failed
      000054 85               [ 2]   91 	popw	x
      000055                         92 00110$:
                                     93 ;	../STM8S_StdPeriph_Driver/src/stm8s_adc1_ClearITPendingBit.c: 66: if (((uint16_t)ITPendingBit & 0xF0) == 0x10)
      000055 90 5F            [ 1]   94 	clrw	y
      000057 7B 03            [ 1]   95 	ld	a, (0x03, sp)
      000059 A4 F0            [ 1]   96 	and	a, #0xf0
      00005B 90 97            [ 1]   97 	ld	yl, a
      00005D 90 A3 00 10      [ 2]   98 	cpw	y, #0x0010
      000061 26 40            [ 1]   99 	jrne	00105$
                                    100 ;	../STM8S_StdPeriph_Driver/src/stm8s_adc1_ClearITPendingBit.c: 69: temp = (uint8_t)((uint16_t)ITPendingBit & 0x0F);
      000063 7B 03            [ 1]  101 	ld	a, (0x03, sp)
      000065 A4 0F            [ 1]  102 	and	a, #0x0f
                                    103 ;	../STM8S_StdPeriph_Driver/src/stm8s_adc1_ClearITPendingBit.c: 70: if (temp < 8)
      000067 97               [ 1]  104 	ld	xl, a
      000068 A1 08            [ 1]  105 	cp	a, #0x08
      00006A 24 1A            [ 1]  106 	jrnc	00102$
                                    107 ;	../STM8S_StdPeriph_Driver/src/stm8s_adc1_ClearITPendingBit.c: 72: ADC1->AWSRL &= (uint8_t)~(uint8_t)((uint8_t)1 << temp);
      00006C C6 54 0D         [ 1]  108 	ld	a, 0x540d
      00006F 6B 01            [ 1]  109 	ld	(0x01, sp), a
      000071 A6 01            [ 1]  110 	ld	a, #0x01
      000073 88               [ 1]  111 	push	a
      000074 9F               [ 1]  112 	ld	a, xl
      000075 4D               [ 1]  113 	tnz	a
      000076 27 05            [ 1]  114 	jreq	00296$
      000078                        115 00295$:
      000078 08 01            [ 1]  116 	sll	(1, sp)
      00007A 4A               [ 1]  117 	dec	a
      00007B 26 FB            [ 1]  118 	jrne	00295$
      00007D                        119 00296$:
      00007D 84               [ 1]  120 	pop	a
      00007E 43               [ 1]  121 	cpl	a
      00007F 14 01            [ 1]  122 	and	a, (0x01, sp)
      000081 C7 54 0D         [ 1]  123 	ld	0x540d, a
      000084 20 2A            [ 2]  124 	jra	00107$
      000086                        125 00102$:
                                    126 ;	../STM8S_StdPeriph_Driver/src/stm8s_adc1_ClearITPendingBit.c: 76: ADC1->AWSRH &= (uint8_t)~(uint8_t)((uint8_t)1 << (temp - 8));
      000086 C6 54 0C         [ 1]  127 	ld	a, 0x540c
      000089 6B 01            [ 1]  128 	ld	(0x01, sp), a
      00008B 1D 00 08         [ 2]  129 	subw	x, #8
      00008E A6 01            [ 1]  130 	ld	a, #0x01
      000090 88               [ 1]  131 	push	a
      000091 9F               [ 1]  132 	ld	a, xl
      000092 4D               [ 1]  133 	tnz	a
      000093 27 05            [ 1]  134 	jreq	00298$
      000095                        135 00297$:
      000095 08 01            [ 1]  136 	sll	(1, sp)
      000097 4A               [ 1]  137 	dec	a
      000098 26 FB            [ 1]  138 	jrne	00297$
      00009A                        139 00298$:
      00009A 84               [ 1]  140 	pop	a
      00009B 43               [ 1]  141 	cpl	a
      00009C 14 01            [ 1]  142 	and	a, (0x01, sp)
      00009E C7 54 0C         [ 1]  143 	ld	0x540c, a
      0000A1 20 0D            [ 2]  144 	jra	00107$
      0000A3                        145 00105$:
                                    146 ;	../STM8S_StdPeriph_Driver/src/stm8s_adc1_ClearITPendingBit.c: 81: ADC1->CSR &= (uint8_t)((uint16_t)~(uint16_t)ITPendingBit);
      0000A3 C6 54 00         [ 1]  147 	ld	a, 0x5400
      0000A6 88               [ 1]  148 	push	a
      0000A7 53               [ 2]  149 	cplw	x
      0000A8 84               [ 1]  150 	pop	a
      0000A9 89               [ 2]  151 	pushw	x
      0000AA 14 02            [ 1]  152 	and	a, (2, sp)
      0000AC 85               [ 2]  153 	popw	x
      0000AD C7 54 00         [ 1]  154 	ld	0x5400, a
      0000B0                        155 00107$:
                                    156 ;	../STM8S_StdPeriph_Driver/src/stm8s_adc1_ClearITPendingBit.c: 83: }
      0000B0 5B 03            [ 2]  157 	addw	sp, #3
      0000B2 81               [ 4]  158 	ret
                                    159 	.area CODE
                                    160 	.area CONST
                                    161 	.area CONST
      000000                        162 ___str_0:
      000000 2E 2E 2F 53 54 4D 38   163 	.ascii "../STM8S_StdPeriph_Driver/src/stm8s_adc1_ClearITPendingBit.c"
             53 5F 53 74 64 50 65
             72 69 70 68 5F 44 72
             69 76 65 72 2F 73 72
             63 2F 73 74 6D 38 73
             5F 61 64 63 31 5F 43
             6C 65 61 72 49 54 50
             65 6E 64 69 6E 67 42
             69 74 2E 63
      00003C 00                     164 	.db 0x00
                                    165 	.area CODE
                                    166 	.area INITIALIZER
                                    167 	.area CABS (ABS)
