                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.4.0 #14620 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module stm8s_adc1_GetITStatus
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _assert_failed
                                     12 	.globl _ADC1_GetITStatus
                                     13 ;--------------------------------------------------------
                                     14 ; ram data
                                     15 ;--------------------------------------------------------
                                     16 	.area DATA
                                     17 ;--------------------------------------------------------
                                     18 ; ram data
                                     19 ;--------------------------------------------------------
                                     20 	.area INITIALIZED
                                     21 ;--------------------------------------------------------
                                     22 ; absolute external ram data
                                     23 ;--------------------------------------------------------
                                     24 	.area DABS (ABS)
                                     25 
                                     26 ; default segment ordering for linker
                                     27 	.area HOME
                                     28 	.area GSINIT
                                     29 	.area GSFINAL
                                     30 	.area CONST
                                     31 	.area INITIALIZER
                                     32 	.area CODE
                                     33 
                                     34 ;--------------------------------------------------------
                                     35 ; global & static initialisations
                                     36 ;--------------------------------------------------------
                                     37 	.area HOME
                                     38 	.area GSINIT
                                     39 	.area GSFINAL
                                     40 	.area GSINIT
                                     41 ;--------------------------------------------------------
                                     42 ; Home
                                     43 ;--------------------------------------------------------
                                     44 	.area HOME
                                     45 	.area HOME
                                     46 ;--------------------------------------------------------
                                     47 ; code
                                     48 ;--------------------------------------------------------
                                     49 	.area CODE
                                     50 ;	../STM8S_StdPeriph_Driver/src/stm8s_adc1_GetITStatus.c: 59: ITStatus ADC1_GetITStatus(ADC1_IT_TypeDef ITPendingBit)
                                     51 ;	-----------------------------------------
                                     52 ;	 function ADC1_GetITStatus
                                     53 ;	-----------------------------------------
      000000                         54 _ADC1_GetITStatus:
      000000 52 03            [ 2]   55 	sub	sp, #3
                                     56 ;	../STM8S_StdPeriph_Driver/src/stm8s_adc1_GetITStatus.c: 65: assert_param(IS_ADC1_ITPENDINGBIT_OK(ITPendingBit));
      000002 1F 02            [ 2]   57 	ldw	(0x02, sp), x
      000004 A3 00 80         [ 2]   58 	cpw	x, #0x0080
      000007 27 48            [ 1]   59 	jreq	00110$
      000009 A3 01 40         [ 2]   60 	cpw	x, #0x0140
      00000C 27 43            [ 1]   61 	jreq	00110$
      00000E A3 01 10         [ 2]   62 	cpw	x, #0x0110
      000011 27 3E            [ 1]   63 	jreq	00110$
      000013 A3 01 11         [ 2]   64 	cpw	x, #0x0111
      000016 27 39            [ 1]   65 	jreq	00110$
      000018 A3 01 12         [ 2]   66 	cpw	x, #0x0112
      00001B 27 34            [ 1]   67 	jreq	00110$
      00001D A3 01 13         [ 2]   68 	cpw	x, #0x0113
      000020 27 2F            [ 1]   69 	jreq	00110$
      000022 A3 01 14         [ 2]   70 	cpw	x, #0x0114
      000025 27 2A            [ 1]   71 	jreq	00110$
      000027 A3 01 15         [ 2]   72 	cpw	x, #0x0115
      00002A 27 25            [ 1]   73 	jreq	00110$
      00002C A3 01 16         [ 2]   74 	cpw	x, #0x0116
      00002F 27 20            [ 1]   75 	jreq	00110$
      000031 A3 01 17         [ 2]   76 	cpw	x, #0x0117
      000034 27 1B            [ 1]   77 	jreq	00110$
      000036 A3 01 18         [ 2]   78 	cpw	x, #0x0118
      000039 27 16            [ 1]   79 	jreq	00110$
      00003B A3 01 1C         [ 2]   80 	cpw	x, #0x011c
      00003E 27 11            [ 1]   81 	jreq	00110$
      000040 A3 01 19         [ 2]   82 	cpw	x, #0x0119
      000043 27 0C            [ 1]   83 	jreq	00110$
      000045 4B 41            [ 1]   84 	push	#0x41
      000047 5F               [ 1]   85 	clrw	x
      000048 89               [ 2]   86 	pushw	x
      000049 4B 00            [ 1]   87 	push	#0x00
      00004B AEr00r00         [ 2]   88 	ldw	x, #(___str_0+0)
      00004E CDr00r00         [ 4]   89 	call	_assert_failed
      000051                         90 00110$:
                                     91 ;	../STM8S_StdPeriph_Driver/src/stm8s_adc1_GetITStatus.c: 67: if (((uint16_t)ITPendingBit & 0xF0) == 0x10)
      000051 5F               [ 1]   92 	clrw	x
      000052 7B 03            [ 1]   93 	ld	a, (0x03, sp)
      000054 A4 F0            [ 1]   94 	and	a, #0xf0
      000056 97               [ 1]   95 	ld	xl, a
      000057 A3 00 10         [ 2]   96 	cpw	x, #0x0010
      00005A 26 3E            [ 1]   97 	jrne	00105$
                                     98 ;	../STM8S_StdPeriph_Driver/src/stm8s_adc1_GetITStatus.c: 70: temp = (uint8_t)((uint16_t)ITPendingBit & 0x0F);
      00005C 7B 03            [ 1]   99 	ld	a, (0x03, sp)
      00005E A4 0F            [ 1]  100 	and	a, #0x0f
                                    101 ;	../STM8S_StdPeriph_Driver/src/stm8s_adc1_GetITStatus.c: 71: if (temp < 8)
      000060 97               [ 1]  102 	ld	xl, a
      000061 A1 08            [ 1]  103 	cp	a, #0x08
      000063 24 19            [ 1]  104 	jrnc	00102$
                                    105 ;	../STM8S_StdPeriph_Driver/src/stm8s_adc1_GetITStatus.c: 73: itstatus = (ITStatus)(ADC1->AWSRL & (uint8_t)((uint8_t)1 << temp));
      000065 C6 54 0D         [ 1]  106 	ld	a, 0x540d
      000068 88               [ 1]  107 	push	a
      000069 A6 01            [ 1]  108 	ld	a, #0x01
      00006B 6B 02            [ 1]  109 	ld	(0x02, sp), a
      00006D 9F               [ 1]  110 	ld	a, xl
      00006E 4D               [ 1]  111 	tnz	a
      00006F 27 05            [ 1]  112 	jreq	00296$
      000071                        113 00295$:
      000071 08 02            [ 1]  114 	sll	(0x02, sp)
      000073 4A               [ 1]  115 	dec	a
      000074 26 FB            [ 1]  116 	jrne	00295$
      000076                        117 00296$:
      000076 84               [ 1]  118 	pop	a
      000077 14 01            [ 1]  119 	and	a, (0x01, sp)
      000079 40               [ 1]  120 	neg	a
      00007A 4F               [ 1]  121 	clr	a
      00007B 49               [ 1]  122 	rlc	a
      00007C 20 28            [ 2]  123 	jra	00106$
      00007E                        124 00102$:
                                    125 ;	../STM8S_StdPeriph_Driver/src/stm8s_adc1_GetITStatus.c: 77: itstatus = (ITStatus)(ADC1->AWSRH & (uint8_t)((uint8_t)1 << (temp - 8)));
      00007E C6 54 0C         [ 1]  126 	ld	a, 0x540c
      000081 6B 01            [ 1]  127 	ld	(0x01, sp), a
      000083 1D 00 08         [ 2]  128 	subw	x, #8
      000086 A6 01            [ 1]  129 	ld	a, #0x01
      000088 88               [ 1]  130 	push	a
      000089 9F               [ 1]  131 	ld	a, xl
      00008A 4D               [ 1]  132 	tnz	a
      00008B 27 05            [ 1]  133 	jreq	00298$
      00008D                        134 00297$:
      00008D 08 01            [ 1]  135 	sll	(1, sp)
      00008F 4A               [ 1]  136 	dec	a
      000090 26 FB            [ 1]  137 	jrne	00297$
      000092                        138 00298$:
      000092 84               [ 1]  139 	pop	a
      000093 14 01            [ 1]  140 	and	a, (0x01, sp)
      000095 40               [ 1]  141 	neg	a
      000096 4F               [ 1]  142 	clr	a
      000097 49               [ 1]  143 	rlc	a
      000098 20 0C            [ 2]  144 	jra	00106$
      00009A                        145 00105$:
                                    146 ;	../STM8S_StdPeriph_Driver/src/stm8s_adc1_GetITStatus.c: 82: itstatus = (ITStatus)(ADC1->CSR & (uint8_t)ITPendingBit);
      00009A C6 54 00         [ 1]  147 	ld	a, 0x5400
      00009D 6B 01            [ 1]  148 	ld	(0x01, sp), a
      00009F 7B 03            [ 1]  149 	ld	a, (0x03, sp)
      0000A1 14 01            [ 1]  150 	and	a, (0x01, sp)
      0000A3 40               [ 1]  151 	neg	a
      0000A4 4F               [ 1]  152 	clr	a
      0000A5 49               [ 1]  153 	rlc	a
      0000A6                        154 00106$:
                                    155 ;	../STM8S_StdPeriph_Driver/src/stm8s_adc1_GetITStatus.c: 84: return ((ITStatus)itstatus);
                                    156 ;	../STM8S_StdPeriph_Driver/src/stm8s_adc1_GetITStatus.c: 85: }
      0000A6 5B 03            [ 2]  157 	addw	sp, #3
      0000A8 81               [ 4]  158 	ret
                                    159 	.area CODE
                                    160 	.area CONST
                                    161 	.area CONST
      000000                        162 ___str_0:
      000000 2E 2E 2F 53 54 4D 38   163 	.ascii "../STM8S_StdPeriph_Driver/src/stm8s_adc1_GetITStatus.c"
             53 5F 53 74 64 50 65
             72 69 70 68 5F 44 72
             69 76 65 72 2F 73 72
             63 2F 73 74 6D 38 73
             5F 61 64 63 31 5F 47
             65 74 49 54 53 74 61
             74 75 73 2E 63
      000036 00                     164 	.db 0x00
                                    165 	.area CODE
                                    166 	.area INITIALIZER
                                    167 	.area CABS (ABS)
