                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.4.0 #14620 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module stm8s_adc1_Init
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _ADC1_ExternalTriggerConfig
                                     12 	.globl _ADC1_ConversionConfig
                                     13 	.globl _ADC1_SchmittTriggerConfig
                                     14 	.globl _ADC1_PrescalerConfig
                                     15 	.globl _assert_failed
                                     16 	.globl _ADC1_Init
                                     17 ;--------------------------------------------------------
                                     18 ; ram data
                                     19 ;--------------------------------------------------------
                                     20 	.area DATA
                                     21 ;--------------------------------------------------------
                                     22 ; ram data
                                     23 ;--------------------------------------------------------
                                     24 	.area INITIALIZED
                                     25 ;--------------------------------------------------------
                                     26 ; absolute external ram data
                                     27 ;--------------------------------------------------------
                                     28 	.area DABS (ABS)
                                     29 
                                     30 ; default segment ordering for linker
                                     31 	.area HOME
                                     32 	.area GSINIT
                                     33 	.area GSFINAL
                                     34 	.area CONST
                                     35 	.area INITIALIZER
                                     36 	.area CODE
                                     37 
                                     38 ;--------------------------------------------------------
                                     39 ; global & static initialisations
                                     40 ;--------------------------------------------------------
                                     41 	.area HOME
                                     42 	.area GSINIT
                                     43 	.area GSFINAL
                                     44 	.area GSINIT
                                     45 ;--------------------------------------------------------
                                     46 ; Home
                                     47 ;--------------------------------------------------------
                                     48 	.area HOME
                                     49 	.area HOME
                                     50 ;--------------------------------------------------------
                                     51 ; code
                                     52 ;--------------------------------------------------------
                                     53 	.area CODE
                                     54 ;	../STM8S_StdPeriph_Driver/src/stm8s_adc1_Init.c: 61: void ADC1_Init(ADC1_ConvMode_TypeDef ADC1_ConversionMode, ADC1_Channel_TypeDef ADC1_Channel, ADC1_PresSel_TypeDef ADC1_PrescalerSelection, ADC1_ExtTrig_TypeDef ADC1_ExtTrigger, FunctionalState ADC1_ExtTriggerState, ADC1_Align_TypeDef ADC1_Align, ADC1_SchmittTrigg_TypeDef ADC1_SchmittTriggerChannel, FunctionalState ADC1_SchmittTriggerState)
                                     55 ;	-----------------------------------------
                                     56 ;	 function ADC1_Init
                                     57 ;	-----------------------------------------
      000000                         58 _ADC1_Init:
      000000 88               [ 1]   59 	push	a
                                     60 ;	../STM8S_StdPeriph_Driver/src/stm8s_adc1_Init.c: 64: assert_param(IS_ADC1_CONVERSIONMODE_OK(ADC1_ConversionMode));
      000001 6B 01            [ 1]   61 	ld	(0x01, sp), a
      000003 27 10            [ 1]   62 	jreq	00104$
      000005 0D 01            [ 1]   63 	tnz	(0x01, sp)
      000007 26 0C            [ 1]   64 	jrne	00104$
      000009 4B 40            [ 1]   65 	push	#0x40
      00000B 5F               [ 1]   66 	clrw	x
      00000C 89               [ 2]   67 	pushw	x
      00000D 4B 00            [ 1]   68 	push	#0x00
      00000F AEr00r00         [ 2]   69 	ldw	x, #(___str_0+0)
      000012 CDr00r00         [ 4]   70 	call	_assert_failed
      000015                         71 00104$:
                                     72 ;	../STM8S_StdPeriph_Driver/src/stm8s_adc1_Init.c: 65: assert_param(IS_ADC1_CHANNEL_OK(ADC1_Channel));
      000015 0D 04            [ 1]   73 	tnz	(0x04, sp)
      000017 27 47            [ 1]   74 	jreq	00109$
      000019 7B 04            [ 1]   75 	ld	a, (0x04, sp)
      00001B 4A               [ 1]   76 	dec	a
      00001C 27 42            [ 1]   77 	jreq	00109$
      00001E 7B 04            [ 1]   78 	ld	a, (0x04, sp)
      000020 A1 02            [ 1]   79 	cp	a, #0x02
      000022 27 3C            [ 1]   80 	jreq	00109$
      000024 7B 04            [ 1]   81 	ld	a, (0x04, sp)
      000026 A1 03            [ 1]   82 	cp	a, #0x03
      000028 27 36            [ 1]   83 	jreq	00109$
      00002A 7B 04            [ 1]   84 	ld	a, (0x04, sp)
      00002C A1 04            [ 1]   85 	cp	a, #0x04
      00002E 27 30            [ 1]   86 	jreq	00109$
      000030 7B 04            [ 1]   87 	ld	a, (0x04, sp)
      000032 A1 05            [ 1]   88 	cp	a, #0x05
      000034 27 2A            [ 1]   89 	jreq	00109$
      000036 7B 04            [ 1]   90 	ld	a, (0x04, sp)
      000038 A1 06            [ 1]   91 	cp	a, #0x06
      00003A 27 24            [ 1]   92 	jreq	00109$
      00003C 7B 04            [ 1]   93 	ld	a, (0x04, sp)
      00003E A1 07            [ 1]   94 	cp	a, #0x07
      000040 27 1E            [ 1]   95 	jreq	00109$
      000042 7B 04            [ 1]   96 	ld	a, (0x04, sp)
      000044 A1 08            [ 1]   97 	cp	a, #0x08
      000046 27 18            [ 1]   98 	jreq	00109$
      000048 7B 04            [ 1]   99 	ld	a, (0x04, sp)
      00004A A1 0C            [ 1]  100 	cp	a, #0x0c
      00004C 27 12            [ 1]  101 	jreq	00109$
      00004E 7B 04            [ 1]  102 	ld	a, (0x04, sp)
      000050 A1 09            [ 1]  103 	cp	a, #0x09
      000052 27 0C            [ 1]  104 	jreq	00109$
      000054 4B 41            [ 1]  105 	push	#0x41
      000056 5F               [ 1]  106 	clrw	x
      000057 89               [ 2]  107 	pushw	x
      000058 4B 00            [ 1]  108 	push	#0x00
      00005A AEr00r00         [ 2]  109 	ldw	x, #(___str_0+0)
      00005D CDr00r00         [ 4]  110 	call	_assert_failed
      000060                        111 00109$:
                                    112 ;	../STM8S_StdPeriph_Driver/src/stm8s_adc1_Init.c: 66: assert_param(IS_ADC1_PRESSEL_OK(ADC1_PrescalerSelection));
      000060 0D 05            [ 1]  113 	tnz	(0x05, sp)
      000062 27 36            [ 1]  114 	jreq	00141$
      000064 7B 05            [ 1]  115 	ld	a, (0x05, sp)
      000066 A1 10            [ 1]  116 	cp	a, #0x10
      000068 27 30            [ 1]  117 	jreq	00141$
      00006A 7B 05            [ 1]  118 	ld	a, (0x05, sp)
      00006C A1 20            [ 1]  119 	cp	a, #0x20
      00006E 27 2A            [ 1]  120 	jreq	00141$
      000070 7B 05            [ 1]  121 	ld	a, (0x05, sp)
      000072 A1 30            [ 1]  122 	cp	a, #0x30
      000074 27 24            [ 1]  123 	jreq	00141$
      000076 7B 05            [ 1]  124 	ld	a, (0x05, sp)
      000078 A1 40            [ 1]  125 	cp	a, #0x40
      00007A 27 1E            [ 1]  126 	jreq	00141$
      00007C 7B 05            [ 1]  127 	ld	a, (0x05, sp)
      00007E A1 50            [ 1]  128 	cp	a, #0x50
      000080 27 18            [ 1]  129 	jreq	00141$
      000082 7B 05            [ 1]  130 	ld	a, (0x05, sp)
      000084 A1 60            [ 1]  131 	cp	a, #0x60
      000086 27 12            [ 1]  132 	jreq	00141$
      000088 7B 05            [ 1]  133 	ld	a, (0x05, sp)
      00008A A1 70            [ 1]  134 	cp	a, #0x70
      00008C 27 0C            [ 1]  135 	jreq	00141$
      00008E 4B 42            [ 1]  136 	push	#0x42
      000090 5F               [ 1]  137 	clrw	x
      000091 89               [ 2]  138 	pushw	x
      000092 4B 00            [ 1]  139 	push	#0x00
      000094 AEr00r00         [ 2]  140 	ldw	x, #(___str_0+0)
      000097 CDr00r00         [ 4]  141 	call	_assert_failed
      00009A                        142 00141$:
                                    143 ;	../STM8S_StdPeriph_Driver/src/stm8s_adc1_Init.c: 67: assert_param(IS_ADC1_EXTTRIG_OK(ADC1_ExtTrigger));
      00009A 0D 06            [ 1]  144 	tnz	(0x06, sp)
      00009C 27 12            [ 1]  145 	jreq	00164$
      00009E 7B 06            [ 1]  146 	ld	a, (0x06, sp)
      0000A0 A1 10            [ 1]  147 	cp	a, #0x10
      0000A2 27 0C            [ 1]  148 	jreq	00164$
      0000A4 4B 43            [ 1]  149 	push	#0x43
      0000A6 5F               [ 1]  150 	clrw	x
      0000A7 89               [ 2]  151 	pushw	x
      0000A8 4B 00            [ 1]  152 	push	#0x00
      0000AA AEr00r00         [ 2]  153 	ldw	x, #(___str_0+0)
      0000AD CDr00r00         [ 4]  154 	call	_assert_failed
      0000B0                        155 00164$:
                                    156 ;	../STM8S_StdPeriph_Driver/src/stm8s_adc1_Init.c: 68: assert_param(IS_FUNCTIONALSTATE_OK(((ADC1_ExtTriggerState))));
      0000B0 0D 07            [ 1]  157 	tnz	(0x07, sp)
      0000B2 27 10            [ 1]  158 	jreq	00169$
      0000B4 0D 07            [ 1]  159 	tnz	(0x07, sp)
      0000B6 26 0C            [ 1]  160 	jrne	00169$
      0000B8 4B 44            [ 1]  161 	push	#0x44
      0000BA 5F               [ 1]  162 	clrw	x
      0000BB 89               [ 2]  163 	pushw	x
      0000BC 4B 00            [ 1]  164 	push	#0x00
      0000BE AEr00r00         [ 2]  165 	ldw	x, #(___str_0+0)
      0000C1 CDr00r00         [ 4]  166 	call	_assert_failed
      0000C4                        167 00169$:
                                    168 ;	../STM8S_StdPeriph_Driver/src/stm8s_adc1_Init.c: 69: assert_param(IS_ADC1_ALIGN_OK(ADC1_Align));
      0000C4 0D 08            [ 1]  169 	tnz	(0x08, sp)
      0000C6 27 12            [ 1]  170 	jreq	00174$
      0000C8 7B 08            [ 1]  171 	ld	a, (0x08, sp)
      0000CA A1 08            [ 1]  172 	cp	a, #0x08
      0000CC 27 0C            [ 1]  173 	jreq	00174$
      0000CE 4B 45            [ 1]  174 	push	#0x45
      0000D0 5F               [ 1]  175 	clrw	x
      0000D1 89               [ 2]  176 	pushw	x
      0000D2 4B 00            [ 1]  177 	push	#0x00
      0000D4 AEr00r00         [ 2]  178 	ldw	x, #(___str_0+0)
      0000D7 CDr00r00         [ 4]  179 	call	_assert_failed
      0000DA                        180 00174$:
                                    181 ;	../STM8S_StdPeriph_Driver/src/stm8s_adc1_Init.c: 70: assert_param(IS_ADC1_SCHMITTTRIG_OK(ADC1_SchmittTriggerChannel));
      0000DA 0D 09            [ 1]  182 	tnz	(0x09, sp)
      0000DC 27 4C            [ 1]  183 	jreq	00179$
      0000DE 7B 09            [ 1]  184 	ld	a, (0x09, sp)
      0000E0 4A               [ 1]  185 	dec	a
      0000E1 27 47            [ 1]  186 	jreq	00179$
      0000E3 7B 09            [ 1]  187 	ld	a, (0x09, sp)
      0000E5 A1 02            [ 1]  188 	cp	a, #0x02
      0000E7 27 41            [ 1]  189 	jreq	00179$
      0000E9 7B 09            [ 1]  190 	ld	a, (0x09, sp)
      0000EB A1 03            [ 1]  191 	cp	a, #0x03
      0000ED 27 3B            [ 1]  192 	jreq	00179$
      0000EF 7B 09            [ 1]  193 	ld	a, (0x09, sp)
      0000F1 A1 04            [ 1]  194 	cp	a, #0x04
      0000F3 27 35            [ 1]  195 	jreq	00179$
      0000F5 7B 09            [ 1]  196 	ld	a, (0x09, sp)
      0000F7 A1 05            [ 1]  197 	cp	a, #0x05
      0000F9 27 2F            [ 1]  198 	jreq	00179$
      0000FB 7B 09            [ 1]  199 	ld	a, (0x09, sp)
      0000FD A1 06            [ 1]  200 	cp	a, #0x06
      0000FF 27 29            [ 1]  201 	jreq	00179$
      000101 7B 09            [ 1]  202 	ld	a, (0x09, sp)
      000103 A1 07            [ 1]  203 	cp	a, #0x07
      000105 27 23            [ 1]  204 	jreq	00179$
      000107 7B 09            [ 1]  205 	ld	a, (0x09, sp)
      000109 A1 08            [ 1]  206 	cp	a, #0x08
      00010B 27 1D            [ 1]  207 	jreq	00179$
      00010D 7B 09            [ 1]  208 	ld	a, (0x09, sp)
      00010F A1 0C            [ 1]  209 	cp	a, #0x0c
      000111 27 17            [ 1]  210 	jreq	00179$
      000113 7B 09            [ 1]  211 	ld	a, (0x09, sp)
      000115 4C               [ 1]  212 	inc	a
      000116 27 12            [ 1]  213 	jreq	00179$
      000118 7B 09            [ 1]  214 	ld	a, (0x09, sp)
      00011A A1 09            [ 1]  215 	cp	a, #0x09
      00011C 27 0C            [ 1]  216 	jreq	00179$
      00011E 4B 46            [ 1]  217 	push	#0x46
      000120 5F               [ 1]  218 	clrw	x
      000121 89               [ 2]  219 	pushw	x
      000122 4B 00            [ 1]  220 	push	#0x00
      000124 AEr00r00         [ 2]  221 	ldw	x, #(___str_0+0)
      000127 CDr00r00         [ 4]  222 	call	_assert_failed
      00012A                        223 00179$:
                                    224 ;	../STM8S_StdPeriph_Driver/src/stm8s_adc1_Init.c: 71: assert_param(IS_FUNCTIONALSTATE_OK(ADC1_SchmittTriggerState));
      00012A 0D 0A            [ 1]  225 	tnz	(0x0a, sp)
      00012C 27 10            [ 1]  226 	jreq	00214$
      00012E 0D 0A            [ 1]  227 	tnz	(0x0a, sp)
      000130 26 0C            [ 1]  228 	jrne	00214$
      000132 4B 47            [ 1]  229 	push	#0x47
      000134 5F               [ 1]  230 	clrw	x
      000135 89               [ 2]  231 	pushw	x
      000136 4B 00            [ 1]  232 	push	#0x00
      000138 AEr00r00         [ 2]  233 	ldw	x, #(___str_0+0)
      00013B CDr00r00         [ 4]  234 	call	_assert_failed
      00013E                        235 00214$:
                                    236 ;	../STM8S_StdPeriph_Driver/src/stm8s_adc1_Init.c: 76: ADC1_ConversionConfig(ADC1_ConversionMode, ADC1_Channel, ADC1_Align);
      00013E 7B 08            [ 1]  237 	ld	a, (0x08, sp)
      000140 88               [ 1]  238 	push	a
      000141 7B 05            [ 1]  239 	ld	a, (0x05, sp)
      000143 88               [ 1]  240 	push	a
      000144 7B 03            [ 1]  241 	ld	a, (0x03, sp)
      000146 CDr00r00         [ 4]  242 	call	_ADC1_ConversionConfig
                                    243 ;	../STM8S_StdPeriph_Driver/src/stm8s_adc1_Init.c: 78: ADC1_PrescalerConfig(ADC1_PrescalerSelection);
      000149 7B 05            [ 1]  244 	ld	a, (0x05, sp)
      00014B CDr00r00         [ 4]  245 	call	_ADC1_PrescalerConfig
                                    246 ;	../STM8S_StdPeriph_Driver/src/stm8s_adc1_Init.c: 83: ADC1_ExternalTriggerConfig(ADC1_ExtTrigger, ADC1_ExtTriggerState);
      00014E 7B 07            [ 1]  247 	ld	a, (0x07, sp)
      000150 88               [ 1]  248 	push	a
      000151 7B 07            [ 1]  249 	ld	a, (0x07, sp)
      000153 CDr00r00         [ 4]  250 	call	_ADC1_ExternalTriggerConfig
                                    251 ;	../STM8S_StdPeriph_Driver/src/stm8s_adc1_Init.c: 88: ADC1_SchmittTriggerConfig(ADC1_SchmittTriggerChannel, ADC1_SchmittTriggerState);
      000156 7B 0A            [ 1]  252 	ld	a, (0x0a, sp)
      000158 88               [ 1]  253 	push	a
      000159 7B 0A            [ 1]  254 	ld	a, (0x0a, sp)
      00015B CDr00r00         [ 4]  255 	call	_ADC1_SchmittTriggerConfig
                                    256 ;	../STM8S_StdPeriph_Driver/src/stm8s_adc1_Init.c: 91: ADC1->CR1 |= ADC1_CR1_ADON;
      00015E C6 54 01         [ 1]  257 	ld	a, 0x5401
      000161 AA 01            [ 1]  258 	or	a, #0x01
      000163 C7 54 01         [ 1]  259 	ld	0x5401, a
                                    260 ;	../STM8S_StdPeriph_Driver/src/stm8s_adc1_Init.c: 92: }
      000166 1E 02            [ 2]  261 	ldw	x, (2, sp)
      000168 5B 0A            [ 2]  262 	addw	sp, #10
      00016A FC               [ 2]  263 	jp	(x)
                                    264 	.area CODE
                                    265 	.area CONST
                                    266 	.area CONST
      000000                        267 ___str_0:
      000000 2E 2E 2F 53 54 4D 38   268 	.ascii "../STM8S_StdPeriph_Driver/src/stm8s_adc1_Init.c"
             53 5F 53 74 64 50 65
             72 69 70 68 5F 44 72
             69 76 65 72 2F 73 72
             63 2F 73 74 6D 38 73
             5F 61 64 63 31 5F 49
             6E 69 74 2E 63
      00002F 00                     269 	.db 0x00
                                    270 	.area CODE
                                    271 	.area INITIALIZER
                                    272 	.area CABS (ABS)
