                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.4.0 #14620 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module stm8s_clk_GetFlagStatus
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _assert_failed
                                     12 	.globl _CLK_GetFlagStatus
                                     13 ;--------------------------------------------------------
                                     14 ; ram data
                                     15 ;--------------------------------------------------------
                                     16 	.area DATA
                                     17 ;--------------------------------------------------------
                                     18 ; ram data
                                     19 ;--------------------------------------------------------
                                     20 	.area INITIALIZED
                                     21 ;--------------------------------------------------------
                                     22 ; absolute external ram data
                                     23 ;--------------------------------------------------------
                                     24 	.area DABS (ABS)
                                     25 
                                     26 ; default segment ordering for linker
                                     27 	.area HOME
                                     28 	.area GSINIT
                                     29 	.area GSFINAL
                                     30 	.area CONST
                                     31 	.area INITIALIZER
                                     32 	.area CODE
                                     33 
                                     34 ;--------------------------------------------------------
                                     35 ; global & static initialisations
                                     36 ;--------------------------------------------------------
                                     37 	.area HOME
                                     38 	.area GSINIT
                                     39 	.area GSFINAL
                                     40 	.area GSINIT
                                     41 ;--------------------------------------------------------
                                     42 ; Home
                                     43 ;--------------------------------------------------------
                                     44 	.area HOME
                                     45 	.area HOME
                                     46 ;--------------------------------------------------------
                                     47 ; code
                                     48 ;--------------------------------------------------------
                                     49 	.area CODE
                                     50 ;	../STM8S_StdPeriph_Driver/src/stm8s_clk_GetFlagStatus.c: 49: FlagStatus CLK_GetFlagStatus(CLK_Flag_TypeDef CLK_FLAG)
                                     51 ;	-----------------------------------------
                                     52 ;	 function CLK_GetFlagStatus
                                     53 ;	-----------------------------------------
      000000                         54 _CLK_GetFlagStatus:
                                     55 ;	../STM8S_StdPeriph_Driver/src/stm8s_clk_GetFlagStatus.c: 56: assert_param(IS_CLK_FLAG_OK(CLK_FLAG));
      000000 90 93            [ 1]   56 	ldw	y, x
      000002 A3 01 10         [ 2]   57 	cpw	x, #0x0110
      000005 27 3C            [ 1]   58 	jreq	00119$
      000007 A3 01 02         [ 2]   59 	cpw	x, #0x0102
      00000A 27 37            [ 1]   60 	jreq	00119$
      00000C A3 02 02         [ 2]   61 	cpw	x, #0x0202
      00000F 27 32            [ 1]   62 	jreq	00119$
      000011 A3 03 08         [ 2]   63 	cpw	x, #0x0308
      000014 27 2D            [ 1]   64 	jreq	00119$
      000016 A3 03 01         [ 2]   65 	cpw	x, #0x0301
      000019 27 28            [ 1]   66 	jreq	00119$
      00001B A3 04 08         [ 2]   67 	cpw	x, #0x0408
      00001E 27 23            [ 1]   68 	jreq	00119$
      000020 A3 04 02         [ 2]   69 	cpw	x, #0x0402
      000023 27 1E            [ 1]   70 	jreq	00119$
      000025 A3 05 04         [ 2]   71 	cpw	x, #0x0504
      000028 27 19            [ 1]   72 	jreq	00119$
      00002A A3 05 02         [ 2]   73 	cpw	x, #0x0502
      00002D 27 14            [ 1]   74 	jreq	00119$
      00002F 89               [ 2]   75 	pushw	x
      000030 90 89            [ 2]   76 	pushw	y
      000032 4B 38            [ 1]   77 	push	#0x38
      000034 4B 00            [ 1]   78 	push	#0x00
      000036 4B 00            [ 1]   79 	push	#0x00
      000038 4B 00            [ 1]   80 	push	#0x00
      00003A AEr00r00         [ 2]   81 	ldw	x, #(___str_0+0)
      00003D CDr00r00         [ 4]   82 	call	_assert_failed
      000040 90 85            [ 2]   83 	popw	y
      000042 85               [ 2]   84 	popw	x
      000043                         85 00119$:
                                     86 ;	../STM8S_StdPeriph_Driver/src/stm8s_clk_GetFlagStatus.c: 59: statusreg = (uint16_t)((uint16_t)CLK_FLAG & (uint16_t)0xFF00);
      000043 4F               [ 1]   87 	clr	a
                                     88 ;	../STM8S_StdPeriph_Driver/src/stm8s_clk_GetFlagStatus.c: 62: if (statusreg == 0x0100) /* The flag to check is in ICKRregister */
      000044 97               [ 1]   89 	ld	xl, a
      000045 A3 01 00         [ 2]   90 	cpw	x, #0x0100
      000048 26 05            [ 1]   91 	jrne	00111$
                                     92 ;	../STM8S_StdPeriph_Driver/src/stm8s_clk_GetFlagStatus.c: 64: tmpreg = CLK->ICKR;
      00004A C6 50 C0         [ 1]   93 	ld	a, 0x50c0
      00004D 20 21            [ 2]   94 	jra	00112$
      00004F                         95 00111$:
                                     96 ;	../STM8S_StdPeriph_Driver/src/stm8s_clk_GetFlagStatus.c: 66: else if (statusreg == 0x0200) /* The flag to check is in ECKRregister */
      00004F A3 02 00         [ 2]   97 	cpw	x, #0x0200
      000052 26 05            [ 1]   98 	jrne	00108$
                                     99 ;	../STM8S_StdPeriph_Driver/src/stm8s_clk_GetFlagStatus.c: 68: tmpreg = CLK->ECKR;
      000054 C6 50 C1         [ 1]  100 	ld	a, 0x50c1
      000057 20 17            [ 2]  101 	jra	00112$
      000059                        102 00108$:
                                    103 ;	../STM8S_StdPeriph_Driver/src/stm8s_clk_GetFlagStatus.c: 70: else if (statusreg == 0x0300) /* The flag to check is in SWIC register */
      000059 A3 03 00         [ 2]  104 	cpw	x, #0x0300
      00005C 26 05            [ 1]  105 	jrne	00105$
                                    106 ;	../STM8S_StdPeriph_Driver/src/stm8s_clk_GetFlagStatus.c: 72: tmpreg = CLK->SWCR;
      00005E C6 50 C5         [ 1]  107 	ld	a, 0x50c5
      000061 20 0D            [ 2]  108 	jra	00112$
      000063                        109 00105$:
                                    110 ;	../STM8S_StdPeriph_Driver/src/stm8s_clk_GetFlagStatus.c: 74: else if (statusreg == 0x0400) /* The flag to check is in CSS register */
      000063 A3 04 00         [ 2]  111 	cpw	x, #0x0400
      000066 26 05            [ 1]  112 	jrne	00102$
                                    113 ;	../STM8S_StdPeriph_Driver/src/stm8s_clk_GetFlagStatus.c: 76: tmpreg = CLK->CSSR;
      000068 C6 50 C8         [ 1]  114 	ld	a, 0x50c8
      00006B 20 03            [ 2]  115 	jra	00112$
      00006D                        116 00102$:
                                    117 ;	../STM8S_StdPeriph_Driver/src/stm8s_clk_GetFlagStatus.c: 80: tmpreg = CLK->CCOR;
      00006D C6 50 C9         [ 1]  118 	ld	a, 0x50c9
      000070                        119 00112$:
                                    120 ;	../STM8S_StdPeriph_Driver/src/stm8s_clk_GetFlagStatus.c: 83: if ((tmpreg & (uint8_t)CLK_FLAG) != (uint8_t)RESET)
      000070 93               [ 1]  121 	ldw	x, y
      000071 89               [ 2]  122 	pushw	x
      000072 14 02            [ 1]  123 	and	a, (2, sp)
      000074 85               [ 2]  124 	popw	x
      000075 4D               [ 1]  125 	tnz	a
      000076 27 03            [ 1]  126 	jreq	00114$
                                    127 ;	../STM8S_StdPeriph_Driver/src/stm8s_clk_GetFlagStatus.c: 85: bitstatus = SET;
      000078 A6 01            [ 1]  128 	ld	a, #0x01
      00007A 81               [ 4]  129 	ret
      00007B                        130 00114$:
                                    131 ;	../STM8S_StdPeriph_Driver/src/stm8s_clk_GetFlagStatus.c: 89: bitstatus = RESET;
      00007B 4F               [ 1]  132 	clr	a
                                    133 ;	../STM8S_StdPeriph_Driver/src/stm8s_clk_GetFlagStatus.c: 93: return((FlagStatus)bitstatus);
                                    134 ;	../STM8S_StdPeriph_Driver/src/stm8s_clk_GetFlagStatus.c: 94: }
      00007C 81               [ 4]  135 	ret
                                    136 	.area CODE
                                    137 	.area CONST
                                    138 	.area CONST
      000000                        139 ___str_0:
      000000 2E 2E 2F 53 54 4D 38   140 	.ascii "../STM8S_StdPeriph_Driver/src/stm8s_clk_GetFlagStatus.c"
             53 5F 53 74 64 50 65
             72 69 70 68 5F 44 72
             69 76 65 72 2F 73 72
             63 2F 73 74 6D 38 73
             5F 63 6C 6B 5F 47 65
             74 46 6C 61 67 53 74
             61 74 75 73 2E 63
      000037 00                     141 	.db 0x00
                                    142 	.area CODE
                                    143 	.area INITIALIZER
                                    144 	.area CABS (ABS)
